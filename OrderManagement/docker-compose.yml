# docker-compose.yml
version: '3.8'

services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: ordermanagement-sqlserver
    environment:
      ACCEPT_EULA: Y
      SA_PASSWORD: OrderManagement123!
      MSSQL_PID: Developer
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - ordermanagement-network
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1" -b -o /dev/null
      interval: 30s
      timeout: 10s
      retries: 5
    

  # Order Management API
  ordermanagement-api:
    build:
      context: .
      dockerfile: src/OrderManagement.API/Dockerfile
    container_name: ordermanagement-api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:8080
      ConnectionStrings__DefaultConnection: "Server=sqlserver,1433;Database=OrderManagementDb;User Id=sa;Password=OrderManagement123!;TrustServerCertificate=true;MultipleActiveResultSets=true"
    ports:
      - "5000:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - ordermanagement-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  sqlserver_data:

networks:
  ordermanagement-network:
    driver: bridge
